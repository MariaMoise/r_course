getwd()
read.table(file = "a.txt", header = TRUE)
read.table(file = "a.txt")
read.table(file = "lol.txt", header = TRUE)
getwd()
read.table(file = "lol.txt", header = TRUE)
galas <- read.table(file = "lol.txt", header = TRUE)
View(galas)
View(galas)
lm(galas[,1] ~ galas[,2])
View(galas)
summary(galas)
knitr::opts_chunk$set(echo = TRUE)
install.packages('tinytex')
tinytex::install_tinytex()
popular_packs <- c('babel-russian', 'cyrillic', 'cm-super',
'lh', 'makecmds', 'polyglossia', 'ulem',
'siunitx', 'multirow', 'xcolor', 'colortbl')
tinytex::tlmgr_install(popular_packs)
devtools::install_github('bdemeshev/azbuka')
setwd("C:/Users/icef_guest/Desktop/etalon/r_course")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(Ecdat) # много-много разных наборов данных
library(ISLR) # ещё данные
library(sandwich) # оценка Var для гетероскедастичности
library(caret) # пакет для подбора параметров разных моделей
library(FFTrees) # быстрые деревья
library(margins) # для подсчёта предельных эффектов
library(rpart.plot) # для картинок деревьев
library(plotROC) # визуализация ROC-кривой
library(ggeffects) # графики для предельных эффектов
library(MLmetrics) # метрики качества
install.packages(c("ISLR", "caret", "FFTrees", "margins", "rpart.plot", "plotROC", "MLmetrics"))
educ <- import('xAPI-Edu-Data.csv')
skim(educ)
educ_logit <- mutate(educ, y = fct_collapse(Class, H = c('M', 'H')))
glimpse(educ)
educ_logit <- mutate(educ, y = fct_collapse(Class, H = c('M', 'H')))
educ_fct <- mutate_if(educ_logit, is.character, factor)
glimpse(educ_fct)
set.seed(777)
train_rows <- createDataPartition(educ_fct$y, p = 0.8, list = FALSE)
createDataPartition()
?createDataPartition()
library(caret) # пакет для подбора параметров разных моделей
library(FFTrees) # быстрые деревья
library(margins) # для подсчёта предельных эффектов
library(rpart.plot) # для картинок деревьев
library(plotROC) # визуализация ROC-кривой
library(ggeffects) # графики для предельных эффектов
set.seed(777)
train_rows <- createDataPartition(educ_fct$y, p = 0.8, list = FALSE)
educ_train <- educ_fct[train_rows, ]
educ_test <- educ_fct[-train_rows, ]
educ_lmodel_glm <- glm(data = educ_train, y ~ gender + SectionID + raisedhands, family = binomial(link = 'logit'))
summary(educ_lmodel_glm)
set.seed(777)
train_rows <- createDataPartition(educ_fct$y, p = 0.8, list = FALSE)
educ_train <- educ_fct[train_rows, ]
educ_test <- educ_fct[-train_rows, ]
educ_lmodel_glm <- glm(data = educ_train, y ~ gender + SectionID + raisedhands, family = binomial(link = 'logit'))
summary(educ_lmodel_glm)
educ_lmodel_glm <- glm(data = educ_train,
#y ~ .-Class
y ~ gender + SectionID + raisedhands, family = binomial(link = 'logit'))
educ_lmodel_glm <- glm(data = educ_train,
y ~ gender + SectionID + raisedhands, family = binomial(link = 'logit'))
summary(educ_lmodel_glm)
exp(-0.07)
9*exp(-0.07)
8,4/9,4
8.4/9.4
1*exp(-0.07)/1+exp(-0.07)
educ_margins <- margins(educ_lmodel_glm)
summary(educ_margins)
pred_educ_vis <- ggpredict(educ_lmodel_glm, terms = c('raisedhands', 'gender'))
pred_educ_vis <- plot(pred_educ_vis)
plot(pred_educ_vis)
pred_educ_vis <- ggpredict(educ_lmodel_glm, terms = c('raisedhands', 'SectionID'))
plot(pred_educ_vis)
pred_educ_vis <- ggpredict(educ_lmodel_glm, terms = c('raisedhands', 'gender'))
plot(pred_educ_vis)
educ_lmodel <- train(data = educ_train, y ~ gender + SectionID + raisedhands, family = binomial(link = 'logit'), method = 'glm')
summary(educ_lmodel)
educ_pred <- predict(educ_lmodel, newdata = educ_test)
head(educ_pred)
educ_prob <- predict(educ_lmodel, newdata = educ_test, type = 'prob')
head(educ_prob)
View(pred_educ_vis)
confusionMatrix(data = educ_pred, reference = educ_test$y)
install.packages("ranger")
tree_model <- train(y ~ . - Class, data = educ_test,
method = 'rpart2',
na.action = na.omit)
rpart.plot(tree_model$finalModel)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(ISLR) # ещё данные
library(caret) # пакет для подбора параметров разных моделей
library(FFTrees) # быстрые деревья
library(margins) # для подсчёта предельных эффектов
library(rpart.plot) # для картинок деревьев
library(plotROC) # визуализация ROC-кривой
library(ggeffects) # графики для предельных эффектов
library(MLmetrics) # метрики качества
library(ranger) # случайный лес
library(factoextra) # графики для кластеризации и pca
library(elasticnet) # LASSO
library(latex2exp) # формулы в подписях к графику
library(distances) # расчет различных расстояний
install.packages(c("elasticnet", "latex2exp", "distances"))
library(elasticnet) # LASSO
library(latex2exp) # формулы в подписях к графику
library(distances) # расчет различных расстояний
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(ISLR) # ещё данные
library(caret) # пакет для подбора параметров разных моделей
library(FFTrees) # быстрые деревья
library(margins) # для подсчёта предельных эффектов
library(rpart.plot) # для картинок деревьев
library(plotROC) # визуализация ROC-кривой
library(ggeffects) # графики для предельных эффектов
library(MLmetrics) # метрики качества
library(ranger) # случайный лес
library(factoextra) # графики для кластеризации и pca
library(elasticnet) # LASSO
library(latex2exp) # формулы в подписях к графику
library(distances) # расчет различных расстояний
educ <- import('xAPI-Edu-Data.csv')
skim(educ)
FFTrees.guide()
setwd("C:/Users/icef_guest/Desktop/etalon/r_course")
educ <- import('data/xAPI-Edu-Data.csv')
educ <- import('data/xAPI-Edu-Data.csv')
skim(educ)
educ_logit <- mutate(educ, y = fct_collapse(Class, H = c('M', 'H'))) %>%
select(-Class)
educ_fct <- mutate_if(educ_logit, is.character, factor)
educ_fct_rel <- mutate(educ_fct, y = fct_relevel(y, 'L'))
set.seed(777)
train_rows <- createDataPartition(educ_fct$y, p = 0.8, list = FALSE)
educ_train <- educ_fct[train_rows, ]
educ_test <- educ_fct[-train_rows, ]
educ_lmodel <- train(data = educ_train,
y ~ gender + SectionID + raisedhands, family = binomial(link = 'logit'),
method = 'glm')
summary(educ_lmodel)
educ_pred <- predict(educ_lmodel, newdata = educ_test)
head(educ_pred)
educ_prob <- predict(educ_lmodel, newdata = educ_test, type = 'prob')
head(educ_prob)
confusionMatrix(data = educ_pred, reference = educ_test$y)
8/(8+17)
17/(8+17)
confusionMatrix(data = educ_pred, reference = educ_test$y, positive = L)
confusionMatrix(data = educ_pred, reference = educ_test$y, positive = "L")
def <- Default
glimpse(def)
set.seed(111)
View(def)
train_rows <- createDataPartition(def$default, p = 0.7, list = FALSE)
def <- Default
glimpse(def)
set.seed(111)
train_rows <- createDataPartition(def$default, p = 0.7, list = FALSE)
def_train <- def[train_rows, ]
def_test <- def[-train_rows, ]
def_lmodel <- train(data = def, default ~ student + balance + income , family = binomial(link = 'logit'), method = 'glm')
summary(def_model)
summary(def_lmodel)
educ_pred <- predict(educ_lmodel, newdata = educ_test)
head(educ_pred)
def_pred <- predict(def_lmodel, newdata = def_test)
head(def_pred)
def_prob <- predict(def_lmodel, newdata = df_test, type = 'prob')
def_prob <- predict(def_lmodel, newdata = def_test, type = 'prob')
head(def_prob)
confusionMatrix(data = def_pred, reference = def_test$default)
confusionMatrix(data = def_pred, reference = def_test$default, positive = "yes")
confusionMatrix(data = def_pred, reference = def_test$default, positive = "Yes")
2889+11
71+28
glimpse(def)
educ_test_set <- data.frame(H = educ_prob$H,
L = educ_prob$L,
pred = educ_pred,
obs = educ_test$y)
glimpse(educ_test_set)
levs <- levels(educ_test_set$obs)
twoClassSummary(educ_test_set, lev = levs) # don't work with tibble
prSummary(educ_test_set, lev = levs) # нужен пакет MLmetrics
ggplot(educ_test_set, aes(d = obs, m = L)) +
geom_roc(n.cuts = 0) +
labs(title = 'Кривая ROC',
x = 'False positive ratio = FP / (FP + TN)',
y = 'True positive ratio = TP / (TP + FN)')
educ_test_set <- mutate(educ_test_set, gender = educ_test$gender)
ggplot(educ_test_set, aes(d = obs, m = L, color = gender)) +
geom_roc(n.cuts = 0) +
labs(title = 'Кривые ROC в зависимости от пола',
x = 'False positive ratio = FP / (FP + TN)',
y = 'True positive ratio = TP / (TP + FN)',
color = 'Пол')
educ_test_set <- data.frame(H = educ_prob$H,
L = educ_prob$L,
pred = educ_pred,
obs = educ_test$y)
glimpse(educ_test_set)
levs <- levels(educ_test_set$obs)
twoClassSummary(educ_test_set, lev = levs) # don't work with tibble
prSummary(educ_test_set, lev = levs) # нужен пакет MLmetrics
levs
ggplot(educ_test_set, aes(d = obs, m = L)) +
geom_roc(n.cuts = 30) +
labs(title = 'Кривая ROC',
x = 'False positive ratio = FP / (FP + TN)',
y = 'True positive ratio = TP / (TP + FN)')
ggplot(educ_test_set, aes(d = obs, m = L)) +
geom_roc(n.cuts = 20) +
labs(title = 'Кривая ROC',
x = 'False positive ratio = FP / (FP + TN)',
y = 'True positive ratio = TP / (TP + FN)')
ggplot(educ_test_set, aes(d = obs, m = L)) +
geom_roc(n.cuts = 10) +
labs(title = 'Кривая ROC',
x = 'False positive ratio = FP / (FP + TN)',
y = 'True positive ratio = TP / (TP + FN)')
ggplot(educ_test_set, aes(d = obs, m = L, color = gender)) +
geom_roc(n.cuts = 0) +
labs(title = 'Кривые ROC в зависимости от пола',
x = 'False positive ratio = FP / (FP + TN)',
y = 'True positive ratio = TP / (TP + FN)',
color = 'Пол')
educ_train2 <- mutate(educ_train, ybin = ifelse(y == 'H', 1, 0)) %>%
select(-Class)
ranger_model <- train(y ~ . - Class, data = educ_test,
method = "ranger",
na.action = na.omit,
importance = 'impurity',
tuneLength = 4)
ranger_model <- train(y ~ . , data = educ_test,
method = "ranger",
na.action = na.omit,
importance = 'impurity',
tuneLength = 4)
ranger_model <- train(y ~ . , data = educ_test,
method = 'ranger',
na.action = na.omit,
importance = 'impurity')
View(ranger_model)
ranger_model <- train(y ~ . , data = educ_train,
method = 'ranger',
na.action = na.omit, # убрать пропущенные значения
importance = 'impurity')
ranger_model
plot(ranger_model,
xlab = 'Количество случайно отбираемых регрессоров',
ylab = 'Точность (бутстрэп оценка)',
main = 'Зависимость точности от настроек дерева',
auto.key = list(title = 'Алгоритм разбиения ветки', cex.title = 1))
set.seed(777)
ranger_model <- train(y ~ . , data = educ_train,
method = 'ranger',
na.action = na.omit, # убрать пропущенные значения
importance = 'impurity')
ranger_model
plot(ranger_model,
xlab = 'Количество случайно отбираемых регрессоров',
ylab = 'Точность (бутстрэп оценка)',
main = 'Зависимость точности от настроек дерева',
auto.key = list(title = 'Алгоритм разбиения ветки', cex.title = 1))
protein <- import('Europenaprotein.csv')
skim(protein)
protein <- import('data/Europenaprotein.csv')
skim(protein)
protein_no_country <- protein %>%
mutate_if(is.numeric, ~ as.vector(scale(.))) %>%
column_to_rownames(var = 'Country')
protein_dist <- distances(protein_no_country,
normalize = "mahalanobize") %>% as.matrix()
rownames(protein_dist) <- rownames(protein_no_country)
protein_hcl <- hcut(protein_dist, k = 4)
fviz_dend(protein_hcl,
cex = 0.5, # размер подписи
color_labels_by_k = TRUE) # цвет подписей по группам
ranger_import <- varImp(ranger_model)
ranger_import
plot(ranger_import,
main = 'Важность переменных случайного леса',
xlab = 'Среднее падение индекса Джини')
educ_ranger <- mutate(educ_test,
yhat = predict(ranger_model, educ_test, na.action = na.pass))
confusionMatrix(educ_ranger$yhat, educ_ranger$y)
protein_dist <- distances(protein_no_country,
normalize = "mahalanobize") %>% as.matrix()
rownames(protein_dist) <- rownames(protein_no_country)
protein_hcl <- hcut(protein_dist, k = 4)
fviz_dend(protein_hcl,
cex = 0.5, # размер подписи
color_labels_by_k = TRUE) # цвет подписей по группам
fviz_dend(protein_hcl,
cex = 0.6, # размер подписи
color_labels_by_k = TRUE) # цвет подписей по группам
fviz_dend(protein_hcl,
cex = 0.7, # размер подписи
color_labels_by_k = TRUE) # цвет подписей по группам
